// ######################################################################
// 
// 《Neo4j图数据库扩展指南》
// 
// 代码示例 - 第12章
// 
// 作者：俞方桦，https://www.linkedin.com/in/joshuayu/
// 最后修改日期：2019-12-29
//
// ###################################################################### 


// #########################################################################
// 
// 12.2节


// 12.2(1) 计算全图中所有节点的度中心性
//   - 包括所有关系、和两个方向
//   - 同一对节点之间、一个方向上的关系只统计一次
//   - 结果直接返回

CALL algo.degree.stream('城市', NULL, {direction: 'BOTH'})
YIELD nodeId, score
RETURN algo.asNode(nodeId).name AS node, score AS centrality
ORDER BY centrality DESC
LIMIT 20;

// 12.2(2) 计算全图中所有节点的度中心性
//   - 包括所有关系、和两个方向
//   - 计算权重：distance
//   - 同一对节点之间、一个方向上的关系只统计一次
//   - 结果直接返回

CALL algo.degree.stream('城市', NULL, 
  {direction: 'BOTH', weightProperty: 'distance'}
)
YIELD nodeId, score
RETURN algo.asNode(nodeId).name AS node, score AS centrality
ORDER BY centrality DESC
LIMIT 20;


// 12.3(1) 计算全图中所有节点的紧密中心性

CALL algo.closeness.stream('城市', NULL)
YIELD nodeId, centrality
RETURN algo.asNode(nodeId).name AS node, centrality
ORDER BY centrality DESC LIMIT 20;


// 12.3（2） 计算全图中所有节点的紧密中心性，包括非连通分量

CALL algo.closeness.stream('城市', NULL, {improved: true})
YIELD nodeId, centrality
RETURN algo.asNode(nodeId).name AS node, centrality
ORDER BY centrality DESC LIMIT 20; 


// 12.4(1) 计算全图中所有节点的协调中心性

CALL algo.harmonic.stream('城市', NULL)
YIELD nodeId, centrality
RETURN algo.asNode(nodeId).name AS node, centrality
ORDER BY centrality DESC LIMIT 20;


// 12.5(1) 计算全图中所有节点的间接中心性

CALL algo.betweenness.stream(
  '城市', '铁路连接|公路连接',{direction: 'BOTH'} 
) YIELD nodeId, centrality
RETURN algo.asNode(nodeId).name AS node, centrality
ORDER BY centrality DESC
LIMIT 20;


// 12.6(1) 计算节点的特征向量中心性
//    - Page节点、LINKS关系
//    - 规范化结果：使用最大值作为分母转换每个节点的值到(0,1]区间

CALL algo.eigenvector.stream(
  'Page', 'LINKS', {normalization: "max"}
)
YIELD nodeId, score
WITH algo.asNode(nodeId) AS node, score
RETURN node.name, score
ORDER BY score DESC

// 12.6(2) 计算节点的特征向量中心性
//    - 使用Cypher投影
//    - 规范化结果：使用最大值作为分母转换每个节点的值到(0,1]区间

CALL algo.eigenvector.stream(
  'MATCH (p:Page) RETURN id(p) as id',
  'MATCH (p1:Page)-[:LINKS]->(p2:Page) RETURN id(p1) as source, id(p2) as target',
  {graph:'cypher', iteration:10, normalization: 'max' }
) YIELD nodeId, score
WITH algo.asNode(nodeId) AS node, score
RETURN node.name, score
ORDER BY score DESC


// 12.7(1) 计算节点的页面排行指标
//    - Page节点、LINKS关系

CALL algo.pageRank.stream(
  'Page', 'LINKS', {iterations:20, dampingFactor:0.85}
)
YIELD nodeId, score
WITH algo.asNode(nodeId) AS node, score
RETURN node.name, score
ORDER BY score DESC


// 12.7(2) 计算节点的页面排行指标
//    - Page节点、LINKS关系
//    - 设置个性化节点


MATCH (n:Page{name:'About'})
CALL algo.pageRank.stream(
  'Page', 'LINKS', 
  {iterations:2, dampingFactor:0.85, sourceNodes:[n]}
)
YIELD nodeId, score
WITH algo.asNode(nodeId) AS node, score
RETURN node.name, score
ORDER BY score DESC







